## common.graphqls ===============================================

interface Node {
  id: ID!
}

scalar Timestamp
scalar DateTime
scalar Any

union ModelPagination = WorkPagination | UserPagination

directive @auth on FIELD_DEFINITION

interface Pagination {
  pageInfo: PaginationInfo!
  nodes: [Node]! # Node型の配列という意味
}

type PaginationInfo {
  page: Int!
  paginationLength: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  count: Int!
  totalCount: Int!
}

enum Model {
  user
  work
}
## mutation.graphqls ===============================================

### Mutation(更新系)の定義
type Mutation {
  updateProfile(input: UpdateProfileInput!): User! @auth
  createWork(input: CreateWorkInput!): Boolean! @auth
  updateWork(input: UpdateWorkInput!): Boolean! @auth
  deleteWorks(ids: [ID]!): Boolean! @auth
  login(id: String!, email: String!): Any!
}

###インプット用のスキーマ定義
input UpdateProfileInput {
  id: ID!
  birthday: String
  comment: String
}

input CreateWorkInput {
  title: String!
  summary: String
  image_url: String
  duration: String
  number_of_people: Int
  language: String
  role: String
  url: String
  brief_story: String
  user_id: String!
}

input UpdateWorkInput {
  id: ID!
  title: String
  summary: String
  image_url: String
  duration: String
  number_of_people: Int
  language: String
  role: String
  url: String
  brief_story: String
}

directive @hasRole(role: [Role!]!) on FIELD_DEFINITION

enum Role {
  ADMIN
  USER
  VIEWER
}
## profile.graphqls ===============================================

type Profile {
  id: ID!
  birthday: Timestamp
  comment: String
  user: User!
  }
## query.graphqls ===============================================

###  Query(read系)
type Query {
  userAuth(id: ID!): User! @auth
  user(id: ID!): User!
  users(limit: Int!, offset: Int): UserPagination!
  work(id: ID!): Work
  works(limit: Int!, order: String! ,searched: String!, num: Int!): WorkPagination!
  workNodes(limit: Int!, order: String! ,searched: String!, num: Int!): [Work!]!
  search(target: String!, keyword: String! limit: Int!, searched: String!, num: Int!): ModelPagination!
}
## user.graphqls ===============================================

type User implements Node{
  id: ID!
  name: String
  email: String
  emailVerified: [Timestamp]
  image: String
  works: WorkPagination
  profile: Profile
}

type UserPagination implements Pagination{
  type: Model!
  pageInfo: PaginationInfo!
  nodes: [User!]!
}
## work.graphqls ===============================================

type Work implements Node{
  id: ID!
  title: String!
  summary: String
  image_url: String
  duration: String
  number_of_people: Int
  language: String
  role: String
  url: String
  brief_story: String
  created_at: DateTime!
  updated_at: DateTime!
  is_delete: Boolean!
  number_of_work: Int
  user: User!
  }

type WorkPagination implements Pagination {
  type: Model!
  pageInfo: PaginationInfo!
  nodes: [Work!]!
}
