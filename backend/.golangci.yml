# Options for analysis running.
run:
  skip-dirs:
    - src/external_libs
    - autogenerated_by_my_lib
  skip-files:
    - ".*\\.my\\.go$"
    - lib/bad.go
  allow-parallel-runners: true
  go: '1.19'

# # output configuration options
# output:
#   format: json
#   print-issued-lines: true
#   print-linter-name: true
#   uniq-by-line: false
#   sort-results: true

# All available settings of specific linters.
linters-settings:
  lll:
    line-length: 150
    tab-width: 1
  tagliatelle:
    # Check the struct tag name case.
    case:
      # Use the struct field name to check the name of the struct tag.
      # Default: false
      use-field-name: true
      # `camel` is used for `json` and `yaml`, and `header` is used for `header` (can be overridden)
      # Default: {}
      rules:
        # Any struct tag type can be used.
        # Support string case: `camel`, `pascal`, `kebab`, `snake`, `goCamel`, `goPascal`, `goKebab`, `goSnake`, `upper`, `lower`, `header`
        json: camel
        yaml: camel
        xml: camel
        bson: snake
        avro: snake
        mapstructure: kebab
linters:
  enable-all: true
  disable:
    - golint
    - structcheck
    - ifshort
    - deadcode
    - varcheck
    - nosnakecase
    - scopelint
    - interfacer
    - maligned
    - exhaustivestruct
    - rowserrcheck
    - wastedassign
    - gci
    - gofumpt
    - gofmt
    - exhaustruct
    - varnamelen
    - forbidigo
    - goimports
    - ireturn
    - goerr113
    - gochecknoglobals
    - revive
    - stylecheck
    - staticcheck # 非推奨を教えてくれる
